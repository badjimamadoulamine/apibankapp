const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const UserSchema = new mongoose.Schema({
Â  nom: {
Â  Â  type: String,
Â  Â  required: [true, 'Veuillez ajouter un nom']
Â  },
Â  prenom: {
Â  Â  type: String,
Â  Â  required: [true, 'Veuillez ajouter un prÃ©nom']
Â  },
    // ðŸŽ¯ NOTE: Vous n'aviez pas le champ 'email' dans le schÃ©ma prÃ©cÃ©dent, mais je l'ajoute
    // car il est prÃ©sent dans vos requÃªtes Postman et dans la demande de profil public.
    email: { 
        type: String,
        unique: true,
        required: [true, 'Veuillez ajouter un email'],
        match: [
            /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,
            'Veuillez ajouter une adresse email valide'
        ]
    },
Â  telephone: {
Â  Â  type: String,
Â  Â  required: [true, 'Veuillez ajouter un numÃ©ro de tÃ©lÃ©phone'],
Â  Â  unique: true
Â  },
Â  date_naissance: {
Â  Â  type: Date,
Â  Â  required: [true, 'Veuillez ajouter une date de naissance']
Â  },
Â  adresse: {
Â  Â  type: String,
Â  Â  required: [true, 'Veuillez ajouter une adresse']
Â  },
Â  numero_carte_identite: {
Â  Â  type: String,
Â  Â  required: [true, 'Veuillez ajouter un numÃ©ro de carte d\'identitÃ©'],
Â  Â  unique: true
Â  },
Â  numero_compte: { // Le numÃ©ro de compte bancaire liÃ©
Â  Â  type: String,
Â  Â  unique: true,
Â  Â  required: true,
Â  Â  default: function() {
Â  Â  Â  // GÃ©nÃ©rer un numÃ©ro de compte unique (exemple simple)
Â  Â  Â  const datePart = Date.now().toString().slice(-4);
Â  Â  Â  const randomPart = Math.floor(100000 + Math.random() * 900000);
Â  Â  Â  return `CM-${datePart}-${randomPart}`;
Â  Â  }
Â  },
Â  role: {
Â  Â  type: String,
Â  Â  enum: ['client', 'agent', 'distributeur'],
Â  Â  default: 'client'
Â  },
Â  mot_de_passe: {
Â  Â  type: String,
Â  Â  required: [true, 'Veuillez ajouter un mot de passe'],
Â  Â  minlength: 6,
Â  Â  select: false // Ne pas retourner le mot de passe par dÃ©faut
Â  },
Â  blocked: {
Â  Â  type: Boolean,
Â  Â  default: false
Â  },
Â  createdBy: {
Â  Â  type: mongoose.Schema.ObjectId,
Â  Â  ref: 'User',
Â  Â  required: function() {
Â  Â  Â  return this.role !== 'agent' && this.role !== 'client'; // Requis UNIQUEMENT pour 'distributeur'
Â  Â  }
Â  },
Â  date_creation: {
Â  Â  type: Date,
Â  Â  default: Date.now
Â  }
});

// Chiffrer le mot de passe avant de sauvegarder
UserSchema.pre('save', async function(next) {
Â  if (!this.isModified('mot_de_passe')) {
Â  Â  next();
Â  }
Â  const salt = await bcrypt.genSalt(10);
Â  this.mot_de_passe = await bcrypt.hash(this.mot_de_passe, salt);
});

// MÃ©thode pour comparer le mot de passe
UserSchema.methods.comparePassword = async function(enteredPassword) {
Â  return await bcrypt.compare(enteredPassword, this.mot_de_passe);
};

// ðŸŽ¯ FIX: getPublicProfile mis Ã  jour avec tous les champs non-sensibles
UserSchema.methods.getPublicProfile = function() {
    return {
        id: this._id,
        nom: this.nom,
        prenom: this.prenom,
        email: this.email,
        telephone: this.telephone,
        date_naissance: this.date_naissance,
        adresse: this.adresse,
        numero_carte_identite: this.numero_carte_identite,
        role: this.role,
        numero_compte: this.numero_compte,
        blocked: this.blocked,
        date_creation: this.date_creation,
    };
};

module.exports = mongoose.model('User', UserSchema);